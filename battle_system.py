import vk_api
from vk_api.utils import get_random_id
from utils import split_message, parse_user_mention
import random
from config import ADMIN_IDS
from database import get_user_nick, get_character_by_owner_id, add_win, add_loss

BATTLE_STATE_WAITING = "waiting"
BATTLE_STATE_ACTIVE = "active"
BATTLE_STATE_FINISHED = "finished"

BATTLE_ACTIONS = {
    "–∞—Ç–∞–∫–∞": {
        "name": "‚öîÔ∏è –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞",
        "description": "–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞.",
        "energy_cost": 0,
        "damage_min": 8, 
        "damage_max": 18,
        "type": "attack"
    },
    "—É—Å–∏–ª–∞—Ç–∞–∫–∞": {
        "name": "üí´ –£—Å–∏–ª–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ –ü–≠",
        "description": "–ê—Ç–∞–∫–∞, —É—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∫–ª—è—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π.",
        "energy_cost": 30,
        "damage_min": 20,
        "damage_max": 40,
        "type": "attack"
    },
    "–∑–∞—â–∏—Ç–∞": {
        "name": "üõ°Ô∏è –ó–∞—â–∏—Ç–∞",
        "description": "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–±–æ—Ä–æ–Ω–µ, —É–º–µ–Ω—å—à–∞—è –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω –∏ –Ω–µ–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –ü–≠.",
        "energy_cost": 0,
        "energy_regen_min": 5,
        "energy_regen_max": 15,
        "damage_reduction_percent": 0.3,
        "duration": 1, 
        "type": "defense_buff"
    },
    "–æ–ø—Ç": {
        "name": "‚ú® –û–±—Ä–∞—Ç–Ω–∞—è –ü—Ä–æ–∫–ª—è—Ç–∞—è –¢–µ—Ö–Ω–∏–∫–∞",
        "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–ü–¢ –¥–ª—è –∏—Å—Ü–µ–ª–µ–Ω–∏—è.",
        "energy_cost": 70,
        "heal_min": 25, 
        "heal_max": 80,
        "success_chance": 0.8,
        "type": "heal"
    },
    "—á–≤": {
        "name": "‚ö° –ß—ë—Ä–Ω–∞—è –í—Å–ø—ã—à–∫–∞",
        "description": "–ú–æ—â–Ω–µ–π—à–∞—è –∞—Ç–∞–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –∏–¥–µ–∞–ª—å–Ω–æ–º –≤–ª–æ–∂–µ–Ω–∏–∏ –ü–≠. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é.",
        "energy_cost": 100,
        "damage_min": 50,
        "damage_max": 100,
        "success_chance": 0.20,
        "on_success_buff": {"name": "–ó–æ–Ω–∞", "duration": 3, "damage_boost_percent": 25},
        "type": "special_attack"
    },
    "—Ä—Ç": {
        "name": "üåå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
        "description": "–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Å–≤–æ–µ–π —Ç–µ—Ö–Ω–∏–∫–∏.",
        "energy_cost_multiplier": 1.0,
        "success_chance": 0.75,
        "type": "domain_expansion"
    },
    "–æ—Ç–¥—ã—Ö": {
        "name": "üßò –û—Ç–¥—ã—Ö",
        "description": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç—å –ø—Ä–æ–∫–ª—è—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏.",
        "energy_cost": 0, 
        "energy_regen_min": 15, 
        "energy_regen_max": 40,
        "type": "utility"
    }
}

CURSED_TECHNIQUES = {
    'shrine': {
        'name': '–•—Ä–∞–º (–†—ë–º–µ–Ω –°—É–∫—É–Ω–∞)',
        'description': '–¢–µ—Ö–Ω–∏–∫–∞ –°—É–∫—É–Ω—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ–∑—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥—Å–∫–∏–º –ø–ª–∞–º–µ–Ω–µ–º.',
        'moves': {
            '—Ä–∞—Å—Å–µ—á–µ–Ω–∏–µ': {
                'name': '–†–∞—Å—Å–µ—á–µ–Ω–∏–µ',
                'description': '–ù–µ–≤–∏–¥–∏–º—ã–π —Ä–∞–∑—Ä–µ–∑.',
                'ce_cost': 20, 'damage_min': 20, 'damage_max': 40, 'type': 'attack'
            },
            '—Ä–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ': {
                'name': '–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ',
                'description': '–ú–æ—â–Ω—ã–π —Ä–∞–∑—Ä–µ–∑, –∞–¥–∞–ø—Ç–∏—Ä—É—é—â–∏–π—Å—è –ø–æ–¥ –ø—Ä–æ—á–Ω–æ—Å—Ç—å —Ü–µ–ª–∏.',
                'ce_cost': 25, 'damage_min': 25, 'damage_max': 50, 'type': 'attack'
            },
            '–ø–ª–∞–º—è': {
                'name': '–ü–ª–∞–º–µ–Ω–Ω–∞—è –°—Ç—Ä–µ–ª–∞',
                'description': '–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–µ–ª—É –∏–∑ –ø–ª–∞–º–µ–Ω–∏, –Ω–∞–Ω–æ—Å—è—â—É—é –æ–≥—Ä–æ–º–Ω—ã–π —É—Ä–æ–Ω.',
                'ce_cost': 40, 'damage_min': 35, 'damage_max': 75, 'type': 'attack'
            }
        },
        'domain_expansion': {
            'name': '–ó–ª–æ–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–π –•—Ä–∞–º',
            'description': '–ë–µ–∑–±–∞—Ä—å–µ—Ä–Ω–æ–µ –†–¢, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Ä–∞–∂–∞—é—â–µ–µ –≤—Å—ë –≤ —Ä–∞–¥–∏—É—Å–µ –¥–æ 200–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏ –†–∞—Å—Å–µ—á–µ–Ω–∏–µ–º –∏ –†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ–º.',
            'ce_cost': 350, 'duration': 3,
            'effect_description': "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç —Ä–∞–∑—Ä–µ–∑–æ–≤ –∫–∞–∂–¥—ã–π —Ö–æ–¥ (20-30 –µ–¥.).",
            'damage_per_turn_min': 20, 'damage_per_turn_max': 30, 'type': 'damage_over_time'
        }
    },
    'limitless': {
        'name': '–ë–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ—Å—Ç—å (–°–∞—Ç–æ—Ä—É –ì–æ–¥–∂–æ)',
        'description': '–¢–µ—Ö–Ω–∏–∫–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–º —É—Ä–æ–≤–Ω–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏.',
        'moves': {
            '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å': {
                'name': '–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å',
                'description': '–°–æ–∑–¥–∞—ë—Ç –±–∞—Ä—å–µ—Ä, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π –∞—Ç–∞–∫–∏. (+70% —É–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞ 1 —Ö–æ–¥).',
                'ce_cost': 30, 'duration': 1, 'evasion_boost': 0.7, 'type': 'buff_defense'
            },
            '—Å–∏–Ω–∏–π': {
                'name': '–°–∏–Ω–∏–π',
                'description': '–°–æ–∑–¥–∞—ë—Ç —Ç–æ—á–∫—É –º–æ—â–Ω–æ–≥–æ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è.',
                'ce_cost': 35, 'damage_min': 30, 'damage_max': 45, 'type': 'attack'
            },
            '–∫—Ä–∞—Å–Ω—ã–π': {
                'name': '–ö—Ä–∞—Å–Ω—ã–π',
                'description': '–°–æ–∑–¥–∞—ë—Ç –º–æ—â–Ω—É—é –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—é—â—É—é —Å–∏–ª—É.',
                'ce_cost': 40, 'damage_min': 35, 'damage_max': 50, 'type': 'attack'
            },
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': {
                'name': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π',
                'description': '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –°–∏–Ω–µ–≥–æ –∏ –ö—Ä–∞—Å–Ω–æ–≥–æ, —Å–æ–∑–¥–∞—é—â–µ–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—É—é –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—É—é –º–∞—Å—Å—É.',
                'ce_cost': 120, 'damage_min': 70, 'damage_max': 100, 'type': 'attack'
            }
        },
        'domain_expansion': {
            'name': '–ù–µ–æ–±—ä—è—Ç–Ω–∞—è –ë–µ–∑–¥–Ω–∞',
            'description': '–ó–∞—Ç–æ–ø–ª—è–µ—Ç —Ä–∞–∑—É–º —Ü–µ–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∞—Ä–∞–ª–∏–∑—É—è –µ—ë.',
            'ce_cost': 400, 'duration': 2,
            'effect_description': "–¶–µ–ª—å –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (90% —à–∞–Ω—Å) –∏ –Ω–µ –º–æ–∂–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 2 —Ö–æ–¥–∞.",
            'stun_chance': 0.9, 'type': 'stun'
        }
    },
    'ten_shadows': {
        'name': '–¢–µ—Ö–Ω–∏–∫–∞ –î–µ—Å—è—Ç–∏ –¢–µ–Ω–µ–π (–ú—ç–≥—É–º–∏ –§—É—à–∏–≥—É—Ä–æ)',
        'description': '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–∑—ã–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ—Å—è—Ç—å—é —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —à–∏–∫–∏–≥–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–Ω–∏ –∫–∞–∫ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫.',
        'moves': {
            '–ø—Å—ã': {
                'name': '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ü—Å—ã: –¢–æ—Ç–∞–ª—å–Ω–æ—Å—Ç—å',
                'description': '–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –¥–≤—É—Ö –ø—Å–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏.',
                'ce_cost': 25, 'damage_min': 20, 'damage_max': 30, 'type': 'attack_summon'
            },
            '–Ω—É—ç': {
                'name': '–ù—É—ç',
                'description': '–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –∫—Ä—ã–ª–∞—Ç–æ–≥–æ —à–∏–∫–∏–≥–∞–º–∏, –∞—Ç–∞–∫—É—é—â–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º.',
                'ce_cost': 30, 'damage_min': 25, 'damage_max': 35, 'type': 'attack_summon'
            },
            '–∂–∞–±–∞': {
                'name': '–ñ–∞–±–∞',
                'description': '–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –∂–∞–±—É. –ú–æ–∂–µ—Ç —Å—Ö–≤–∞—Ç–∏—Ç—å —Ü–µ–ª—å –∏–ª–∏ –ø–æ–º–æ—á—å –≤ –∑–∞—â–∏—Ç–µ.',
                'ce_cost': 20, 'damage_min': 10, 'damage_max': 15, 'type': 'utility_summon'
            }
        },
        'domain_expansion': {
            'name': '–°–∞–¥ –¢–µ–Ω–µ–≤—ã—Ö –•–∏–º–µ—Ä',
            'description': '–ó–∞—Ç–æ–ø–ª—è–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é —Ç–µ–Ω—è–º–∏, –ø–æ–∑–≤–æ–ª—è—è —Å–≤–æ–±–æ–¥–Ω–æ –ø—Ä–∏–∑—ã–≤–∞—Ç—å –∏ —É—Å–∏–ª–∏–≤–∞—Ç—å —à–∏–∫–∏–≥–∞–º–∏ –î–µ—Å—è—Ç–∏ –¢–µ–Ω–µ–π.',
            'ce_cost': 300, 'duration': 3,
            'effect_description': "–£—Å–∏–ª–∏–≤–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç –ø—Ä–∏–∑—ã–≤–æ–≤ –Ω–∞ 50% –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –¥–æ–ø. —à–∏–∫–∏–≥–∞–º–∏ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –ü–≠ –∫–∞–∂–¥—ã–π —Ö–æ–¥ (3 —Ö–æ–¥–∞).",
            'summon_damage_boost': 1.5, 'type': 'buff_summons'
        }
    },
    'ice_formation': {
        'name': '–õ–µ–¥—è–Ω–æ–µ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–£—Ä–∞—É–º—ç)',
        'description': '–¢–µ—Ö–Ω–∏–∫–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ª—ë–¥ —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –º–æ—â—å—é.',
        'moves': {
            '–º–æ—Ä–æ–∑–Ω—ã–π_—à—Ç–∏–ª—å': {
                'name': '–ú–æ—Ä–æ–∑–Ω—ã–π –®—Ç–∏–ª—å',
                'description': '–û–±–ª–∞–∫–æ –ª–µ–¥—è–Ω–æ–≥–æ —Ç—É–º–∞–Ω–∞. –®–∞–Ω—Å –∑–∞–º–µ–¥–ª–∏—Ç—å —Ü–µ–ª—å (30% –Ω–∞ 2 —Ö–æ–¥–∞).',
                'ce_cost': 30, 'damage_min': 15, 'damage_max': 25, 'slow_chance': 0.3, 'slow_duration': 2, 'type': 'attack_debuff'
            },
            '–ª–µ–¥–æ–ø–∞–¥': {
                'name': '–õ–µ–¥–æ–ø–∞–¥',
                'description': '–û–±—Ä—É—à–∏–≤–∞–µ—Ç –Ω–∞ —Ü–µ–ª—å –º–∞—Å—Å–∏–≤–Ω—ã–µ –ª–µ–¥—è–Ω—ã–µ –≥–ª—ã–±—ã.',
                'ce_cost': 40, 'damage_min': 30, 'damage_max': 45, 'type': 'attack'
            },
            '–ª–µ–¥—è–Ω–æ–π_—à–∏–ø': {
                'name': '–ü—Ä–æ–Ω–∑–∞—é—â–∏–π –õ–µ–¥',
                'description': '–°–æ–∑–¥–∞–µ—Ç –æ—Å—Ç—Ä—ã–µ –ª–µ–¥—è–Ω—ã–µ —à–∏–ø—ã –¥–ª—è –∞—Ç–∞–∫–∏.',
                'ce_cost': 25, 'damage_min': 20, 'damage_max': 30, 'type': 'attack'
            }
        },
        'domain_expansion': {
            'name': '–õ–µ–¥—è–Ω–æ–µ –ß–∏—Å—Ç–∏–ª–∏—â–µ',
            'description': '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª—å–¥–æ–º, –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—è –ø—Ä–æ–∫–ª—è—Ç—É—é —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—Å—è —É—Ä–æ–Ω —Ö–æ–ª–æ–¥–æ–º.',
            'ce_cost': 320, 'duration': 3,
            'effect_description': "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω —Ö–æ–ª–æ–¥–æ–º (10-20 –µ–¥.) –∏ –µ—ë –∑–∞—Ç—Ä–∞—Ç—ã –ü–≠ —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 25% (3 —Ö–æ–¥–∞).",
            'damage_per_turn_min': 10, 'damage_per_turn_max': 20, 'ce_cost_increase_debuff': 1.25, 'type': 'damage_debuff_over_time'
        }
    },
    'disaster_flames': {
        'name': '–ü–ª–∞–º—è –ë–µ–¥—Å—Ç–≤–∏—è (–î–∑—ë–≥–æ)',
        'description': '–¢–µ—Ö–Ω–∏–∫–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–≥–Ω–µ–º –∏ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é.',
        'moves': {
            '–∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ': {
                'name': '–ò–∑–≤–µ—Ä–∂–µ–Ω–∏–µ –£–≥–ª—è',
                'description': '–ê—Ç–∞–∫—É–µ—Ç –≥—Ä–∞–¥–æ–º —Ä–∞—Å–∫–∞–ª–µ–Ω–Ω—ã—Ö –∫–∞–º–Ω–µ–π.',
                'ce_cost': 30, 'damage_min': 25, 'damage_max': 35, 'type': 'attack'
            },
            '–º–µ—Ç–µ–æ—Ä': {
                'name': '–ú–µ—Ç–µ–æ—Ä',
                'description': '–°–æ–∑–¥–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–π –æ–≥–Ω–µ–Ω–Ω—ã–π –º–µ—Ç–µ–æ—Ä.',
                'ce_cost': 100, 'damage_min': 60, 'damage_max': 80, 'type': 'attack'
            },
            '–æ–≥–Ω–µ–Ω–Ω—ã–π_–≤–∏—Ö—Ä—å': {
                'name': '–û–≥–Ω–µ–Ω–Ω—ã–π –í–∏—Ö—Ä—å',
                'description': '–û–∫—Ä—É–∂–∞–µ—Ç —Ü–µ–ª—å –æ–≥–Ω–µ–Ω–Ω—ã–º –≤–∏—Ö—Ä–µ–º (2 —Ö–æ–¥–∞).',
                'ce_cost': 40, 'damage_min': 20, 'damage_max': 30, 'duration': 2, 'type': 'attack_dot_self_target'
            }
        },
        'domain_expansion': {
            'name': '–ì—Ä–æ–± –°—Ç–∞–ª—å–Ω–æ–π –ì–æ—Ä—ã',
            'description': '–°–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –≤—É–ª–∫–∞–Ω–∞, –≥–¥–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ —Ü–µ–ª–∏ —Å–≤–æ–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏.',
            'ce_cost': 380, 'duration': 3,
            'effect_description': "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –∂–∞—Ä–∞ (25-35 –µ–¥.) –∫–∞–∂–¥—ã–π —Ö–æ–¥. –ê—Ç–∞–∫–∏ –î–∑—ë–≥–æ —É—Å–∏–ª–µ–Ω—ã –Ω–∞ 20% (3 —Ö–æ–¥–∞).",
            'damage_per_turn_min': 25, 'damage_per_turn_max': 35, 'user_damage_boost': 1.2, 'type': 'damage_buff_over_time'
        }
    },
    'cursed_plant_manipulation': {
        'name': '–¢–µ—Ö–Ω–∏–∫–∞ –ü—Ä–æ–∫–ª—è—Ç—ã—Ö –†–∞—Å—Ç–µ–Ω–∏–π (–•–∞–Ω–∞–º–∏)',
        'description': '–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏, –ø–∏—Ç–∞—é—â–∏–º–∏—Å—è –ø—Ä–æ–∫–ª—è—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π.',
        'moves': {
            '—Å–Ω–∞—Ä—è–¥—ã': {
                'name': '–î—Ä–µ–≤–µ—Å–Ω—ã–µ –°–Ω–∞—Ä—è–¥—ã',
                'description': '–í—ã–ø—É—Å–∫–∞–µ—Ç –æ—Å—Ç—Ä—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ —à–∏–ø—ã –≤ —Ü–µ–ª—å.',
                'ce_cost': 20, 'damage_min': 18, 'damage_max': 28, 'type': 'attack'
            },
            '–∫–æ—Ä–µ–Ω—å_–ª–æ–≤—É—à–∫–∞': {
                'name': '–ö–æ—Ä–µ–Ω—å –õ–æ–≤—É—à–∫–∞',
                'description': '–ö–æ—Ä–Ω–∏ —Å–∫–æ–≤—ã–≤–∞—é—Ç —Ü–µ–ª—å. –°–Ω–∏–∂–∞–µ—Ç —É–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ (-30% –Ω–∞ 2 —Ö–æ–¥–∞).',
                'ce_cost': 30, 'damage_min': 10, 'damage_max': 15, 'evasion_debuff': 0.3, 'duration': 2, 'type': 'attack_debuff'
            },
            '–ø–æ–ª–µ_–∏–ª–ª—é–∑–∏–π': {
                'name': '–ü–æ–ª–µ –¶–≤–µ—Ç–æ–≤ –ò–ª–ª—é–∑–∏–π',
                'description': '–û—Å–ª–∞–±–ª—è–µ—Ç –≤–æ–ª—é –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (-15% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ 3 —Ö–æ–¥–∞).',
                'ce_cost': 35, 'success_chance_debuff': 0.15, 'duration': 3, 'type': 'debuff'
            }
        },
        'domain_expansion': {
            'name': '–¶–µ—Ä–µ–º–æ–Ω–∏–∞–ª—å–Ω–æ–µ –ú–æ—Ä–µ –°–≤–µ—Ç–∞',
            'description': '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å, –≥–¥–µ –•–∞–Ω–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏ –≤—ã—Å–∞—Å—ã–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é.',
            'ce_cost': 330, 'duration': 3,
            'effect_description': "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω –æ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π (15-20 –µ–¥.) –∫–∞–∂–¥—ã–π —Ö–æ–¥, –•–∞–Ω–∞–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 10 –ü–≠ (3 —Ö–æ–¥–∞).",
            'damage_per_turn_min': 15, 'damage_per_turn_max': 20, 'ce_regen_per_turn': 10, 'type': 'damage_regen_over_time'
        }
    },
    'disaster_tides': {
        'name': '–¢–µ—Ö–Ω–∏–∫–∞ –ü—Ä–∏–ª–∏–≤–Ω–æ–≥–æ –ë–µ–¥—Å—Ç–≤–∏—è (–î–∞–≥–æ–Ω)',
        'description': '–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–¥–æ–π –∏ –ø—Ä–∏–∑—ã–≤–∞—Ç—å –º–æ—Ä—Å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤.',
        'moves': {
            '—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π_—Ä–æ–π': {
                'name': '–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π –†–æ–π',
                'description': '–ü—Ä–∏–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—é —Ä—ã–±-—à–∏–∫–∏–≥–∞–º–∏ –¥–ª—è –º–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏.',
                'ce_cost': 35, 'damage_min': 25, 'damage_max': 40, 'type': 'attack_summon'
            },
            '–≤–æ–¥—è–Ω–æ–π_–≤–∏—Ö—Ä—å': {
                'name': '–í–æ–¥—è–Ω–æ–π –í–∏—Ö—Ä—å',
                'description': '–°–æ–∑–¥–∞–µ—Ç –º–æ—â–Ω—ã–π –≤–æ–¥—è–Ω–æ–π –≤–∏—Ö—Ä—å.',
                'ce_cost': 30, 'damage_min': 20, 'damage_max': 30, 'type': 'attack'
            },
            '–ø—Ä–∏–ª–∏–≤–Ω–∞—è_–≤–æ–ª–Ω–∞': {
                'name': '–ü—Ä–∏–ª–∏–≤–Ω–∞—è –í–æ–ª–Ω–∞',
                'description': '–û–±—Ä—É—à–∏–≤–∞–µ—Ç –Ω–∞ —Ü–µ–ª—å –≤–æ–ª–Ω—É –≤–æ–¥—ã.',
                'ce_cost': 50, 'damage_min': 30, 'damage_max': 40, 'type': 'attack'
            }
        },
        'domain_expansion': {
            'name': '–°–æ—á–∏', 
            'description': '–°–æ–∑–¥–∞–µ—Ç –ø–ª—è–∂ —Å –º–æ—Ä–µ–º, –æ—Ç–∫—É–¥–∞ –î–∞–≥–æ–Ω –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ç–æ–∫ –º–æ—Ä—Å–∫–∏—Ö —à–∏–∫–∏–≥–∞–º–∏, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ø–∞–¥–∞—é—â–∏—Ö –ø–æ —Ü–µ–ª–∏.',
            'ce_cost': 370, 'duration': 3,
            'effect_description': "–¶–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –∞—Ç–∞–∫ —à–∏–∫–∏–≥–∞–º–∏ (20-35 –µ–¥.) –∫–∞–∂–¥—ã–π —Ö–æ–¥ (3 —Ö–æ–¥–∞).",
            'damage_per_turn_min': 20, 'damage_per_turn_max': 35, 'type': 'damage_over_time'
        }
    },
    'idle_transfiguration': {
        'name': '–ü—Ä–∞–∑–¥–Ω–∞—è –¢—Ä–∞–Ω—Å—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ú–∞—Ö–∏—Ç–æ)',
        'description': '–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º—É –¥—É—à–∏, –∫–∞–∫ —Å–≤–æ–µ–π, —Ç–∞–∫ –∏ —á—É–∂–æ–π, –∫–∞—Å–∞–Ω–∏–µ–º.',
        'moves': {
            '–∏—Å–∫–∞–∂–µ–Ω–∏–µ_–¥—É—à–∏': {
                'name': '–ò—Å–∫–∞–∂–µ–Ω–∏–µ –î—É—à–∏',
                'description': '–ö–∞—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –¥—É—à–∏ —Ü–µ–ª–∏.',
                'ce_cost': 30, 'damage_min': 35, 'damage_max': 50, 'type': 'attack_touch'
            },
            '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è_—Ç–µ–ª–∞': {
                'name': '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¢–µ–ª–∞',
                'description': '–ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–ª–æ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è –∞—Ç–∞–∫–∏ (+15 —É—Ä–æ–Ω–∞) –∏–ª–∏ –∑–∞—â–∏—Ç—ã (—Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –Ω–∞ 30%) –Ω–∞ 1 —Ö–æ–¥.',
                'ce_cost': 25, 'type': 'buff_self_choice', 'attack_boost_value': 15, 'damage_reduction': 0.3, 'duration': 1
            },
            '—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ_–¥—É—à–∏': {
                'name': '–ú–Ω–æ–≥–æ–ª–∏–∫–∏–π –î—É—Ö (–ë—É–Ω—à–∏–Ω)',
                'description': '–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–µ–≥–æ –∫–ª–æ–Ω–∞ (—É—Å–∏–ª–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞).',
                'ce_cost': 60, 'damage_min': 40, 'damage_max': 55, 'type': 'attack'
            }
        },
        'domain_expansion': {
            'name': '–°–∞–º–æ–≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞',
            'description': '–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ú–∞—Ö–∏—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ—Å–Ω—É—Ç—å—Å—è –¥—É—à–∏ –ª—é–±–æ–≥–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏.',
            'ce_cost': 360, 'duration': 1, 
            'effect_description': "–ú–∞—Ö–∏—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∫–∞—Å–∞–µ—Ç—Å—è –¥—É—à–∏ —Ü–µ–ª–∏, –Ω–∞–Ω–æ—Å—è –æ–≥—Ä–æ–º–Ω—ã–π —É—Ä–æ–Ω (80-120 –µ–¥.).",
            'damage_min': 80, 'damage_max': 120, 'type': 'insta_damage'
        }
    },
    'blood_manipulation': {
        'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö—Ä–æ–≤—å—é (–ß–æ—Å–æ)',
        'description': '–¢–µ—Ö–Ω–∏–∫–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—Ä–æ–≤—å—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Ç–∞–∫.',
        'moves': {
            '–ø—Ä–æ–Ω–∑–∞—é—â–∞—è_–∫—Ä–æ–≤—å': {
                'name': '–ü—Ä–æ–Ω–∑–∞—é—â–∞—è –ö—Ä–æ–≤—å',
                'description': '–°–∂–∏–º–∞–µ—Ç –∫—Ä–æ–≤—å –∏ –≤—ã—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç –µ–π –Ω–∞ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.',
                'ce_cost': 25, 'damage_min': 25, 'damage_max': 35, 'type': 'attack'
            },
            '—Å–≤–µ—Ä—Ö–Ω–æ–≤–∞—è': {
                'name': '–°–≤–µ—Ä—Ö–Ω–æ–≤–∞—è',
                'description': '–†–∞–∑–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–≥—É—Å—Ç–∫–æ–≤ –∫—Ä–æ–≤–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—Ä—ã–≤–∞—é—Ç—Å—è (—Ç—Ä–µ–±—É–µ—Ç 10 HP).',
                'ce_cost': 40, 'hp_cost': 10, 'damage_min': 30, 'damage_max': 45, 'type': 'attack_aoe_hpcost'
            },
            '–∫—Ä–æ–≤–∞–≤—ã–π_—â–∏—Ç': {
                'name': '–ö—Ä–æ–≤–∞–≤—ã–π –©–∏—Ç',
                'description': '–°–æ–∑–¥–∞–µ—Ç —â–∏—Ç –∏–∑ –∫—Ä–æ–≤–∏, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π 10-20 —É—Ä–æ–Ω–∞ (1 —Ö–æ–¥).',
                'ce_cost': 20, 'damage_reduction_min': 10, 'damage_reduction_max': 20, 'duration': 1, 'type': 'defense'
            },
            '—Å—Ö–æ–¥—è—â–µ–µ—Å—è_–ª–µ–∑–≤–∏–µ': {
                'name': '–°—Ö–æ–¥—è—â–µ–µ—Å—è –õ–µ–∑–≤–∏–µ –ö—Ä–æ–≤–∏',
                'description': '–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–∑ –∫—Ä–æ–≤–∏ –æ—Å—Ç—Ä–æ–µ –ª–µ–∑–≤–∏–µ –¥–ª—è –±–ª–∏–∂–Ω–µ–π –∞—Ç–∞–∫–∏.',
                'ce_cost': 15, 'damage_min': 15, 'damage_max': 25, 'type': 'attack'
            }
        },
        'domain_expansion': None
    },
    'projection_sorcery': {
        'name': '–¢–µ—Ö–Ω–∏–∫–∞ –ü—Ä–æ–µ–∫—Ü–∏–∏ (–ù–∞–æ—è –î–∑–µ–Ω–∏–Ω)',
        'description': '–†–∞–∑–¥–µ–ª—è–µ—Ç —Å–µ–∫—É–Ω–¥—É –Ω–∞ 24 –∫–∞–¥—Ä–∞, –ø–ª–∞–Ω–∏—Ä—É—è –¥–≤–∏–∂–µ–Ω–∏—è. –ö–∞—Å–∞–Ω–∏–µ —Ü–µ–ª–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –µ—ë, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∞–≤–∏–ª—É.',
        'moves': {
            '–∫–∞–¥—Ä_–∞—Ç–∞–∫–∏': {
                'name': '–ê—Ç–∞–∫–∞ –Ω–∞ –ö–∞–¥—Ä–µ',
                'description': '–ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞ —Å —à–∞–Ω—Å–æ–º "–∑–∞–º–æ—Ä–æ–∑–∏—Ç—å" —Ü–µ–ª—å (25% —à–∞–Ω—Å, 1 —Ö–æ–¥).',
                'ce_cost': 25, 'damage_min': 20, 'damage_max': 30, 'freeze_chance': 0.25, 'freeze_duration': 1, 'type': 'attack_debuff'
            },
            '—É—Å–∫–æ—Ä–µ–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ü–∏–∏': {
                'name': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ü—Ä–æ–µ–∫—Ü–∏–∏',
                'description': '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–∫–ª–æ–Ω–µ–Ω–∏–µ (+20%) –∏ —à–∞–Ω—Å –∫—Ä–∏—Ç. —É–¥–∞—Ä–∞ (+15%) –Ω–∞ 3 —Ö–æ–¥–∞.',
                'ce_cost': 30, 'evasion_boost': 0.2, 'crit_chance_boost': 0.15, 'duration': 3, 'type': 'buff_self'
            },
            '—Å–µ—Ä–∏—è_–∫–∞–¥—Ä–æ–≤': {
                'name': '–°–µ—Ä–∏—è –ö–∞–¥—Ä–æ–≤',
                'description': '–ù–∞–Ω–æ—Å–∏—Ç 2-4 –±—ã—Å—Ç—Ä—ã—Ö —É–¥–∞—Ä–∞ –ø–æ 8-12 —É—Ä–æ–Ω–∞ –∫–∞–∂–¥—ã–π.',
                'ce_cost': 40, 'num_hits_min': 2, 'num_hits_max': 4, 'damage_per_hit_min': 8, 'damage_per_hit_max': 12, 'type': 'multi_attack'
            }
        },
        'domain_expansion': None
    }
}


class Battle:
    def __init__(self, challenger_id, target_id, chat_id):
        self.challenger_id = challenger_id
        self.target_id = target_id
        self.chat_id = chat_id
        self.state = BATTLE_STATE_WAITING
        self.current_turn = challenger_id
        
        self.player_data = {
            challenger_id: {
                'id': challenger_id, 'name_cached': None,
                'hp': 100, 'max_hp': 100,
                'ce': 100, 'max_ce': 100,
                'technique_id': random.choice(list(CURSED_TECHNIQUES.keys())),
                'active_effects': {}
            },
            target_id: {
                'id': target_id, 'name_cached': None,
                'hp': 100, 'max_hp': 100,
                'ce': 100, 'max_ce': 100,
                'technique_id': random.choice(list(CURSED_TECHNIQUES.keys())),
                'active_effects': {}
            }
        }
        self.log = []

    def _add_log(self, message):
        self.log.append(message)
        if len(self.log) > 15:
            self.log.pop(0)

    def get_player_data(self, user_id):
        return self.player_data.get(user_id)

    def get_opponent_id(self, user_id):
        return self.target_id if user_id == self.challenger_id else self.challenger_id
    
    def _get_player_name(self, user_id, vk_handle):
        player = self.get_player_data(user_id)
        if player.get('name_cached'):
            return player['name_cached']
        try:
            nick = get_user_nick(user_id)
            if nick:
                name = f"[id{user_id}|{nick}]"
            else:
                char_row = get_character_by_owner_id(user_id)
                if char_row and 'full_name' in dict(char_row):
                    name = f"[id{user_id}|{dict(char_row)['full_name']}]"
                else:
                    name = f"[id{user_id}|{user_id}]"
            player['name_cached'] = name
            return name
        except Exception:
            name = f"[id{user_id}|{user_id}]"
            player['name_cached'] = name
            return name


    def _apply_and_tick_effects(self, current_player_id, vk_handle):
        log_messages = []
        
        player = self.get_player_data(current_player_id)
        opponent_id = self.get_opponent_id(current_player_id)
        opponent = self.get_player_data(opponent_id)

        active_domain_effect_player = player['active_effects'].get('active_domain')
        if active_domain_effect_player and active_domain_effect_player.get('user_id') == current_player_id:
            tech_details_player = CURSED_TECHNIQUES[player['technique_id']]
            domain_stats_player = tech_details_player.get('domain_expansion')
            if domain_stats_player:
                if domain_stats_player['type'] in ['damage_over_time', 'damage_buff_over_time', 'damage_debuff_over_time', 'damage_regen_over_time']:
                    if 'damage_per_turn_min' in domain_stats_player and 'damage_per_turn_max' in domain_stats_player:
                        damage = random.randint(domain_stats_player['damage_per_turn_min'], domain_stats_player['damage_per_turn_max'])
                        opponent['hp'] = max(0, opponent['hp'] - damage)
                        log_messages.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è '{domain_stats_player['name']}' –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞ {self._get_player_name(opponent_id, vk_handle)}.")
                    if domain_stats_player['type'] == 'damage_regen_over_time' and 'ce_regen_per_turn' in domain_stats_player:
                        regen_ce = domain_stats_player['ce_regen_per_turn']
                        player['ce'] = min(player['max_ce'], player['ce'] + regen_ce)
                        log_messages.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è '{domain_stats_player['name']}' –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {regen_ce} –ü–≠ {self._get_player_name(current_player_id, vk_handle)}.")

        active_domain_effect_opponent = opponent['active_effects'].get('active_domain')
        if active_domain_effect_opponent and active_domain_effect_opponent.get('user_id') == opponent_id: 
            tech_details_opponent = CURSED_TECHNIQUES[opponent['technique_id']]
            domain_stats_opponent = tech_details_opponent.get('domain_expansion')
            if domain_stats_opponent:
                if domain_stats_opponent['type'] in ['damage_over_time', 'damage_buff_over_time', 'damage_debuff_over_time', 'damage_regen_over_time']:
                    if 'damage_per_turn_min' in domain_stats_opponent and 'damage_per_turn_max' in domain_stats_opponent:
                        damage_from_opponent_rt = random.randint(domain_stats_opponent['damage_per_turn_min'], domain_stats_opponent['damage_per_turn_max'])
                        player['hp'] = max(0, player['hp'] - damage_from_opponent_rt)
                        log_messages.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ '{domain_stats_opponent['name']}' –Ω–∞–Ω–æ—Å–∏—Ç {damage_from_opponent_rt} —É—Ä–æ–Ω–∞ {self._get_player_name(current_player_id, vk_handle)}.")
                    if domain_stats_opponent['type'] == 'damage_regen_over_time' and 'ce_regen_per_turn' in domain_stats_opponent:
                        regen_ce_opponent = domain_stats_opponent['ce_regen_per_turn']
                        opponent['ce'] = min(opponent['max_ce'], opponent['ce'] + regen_ce_opponent)
                        log_messages.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ '{domain_stats_opponent['name']}' –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {regen_ce_opponent} –ü–≠ {self._get_player_name(opponent_id, vk_handle)}.")
        
        for p_id in [self.challenger_id, self.target_id]:
            p_data_for_tick = self.get_player_data(p_id)
            effects_to_remove = []
            for effect_name, effect_data in list(p_data_for_tick['active_effects'].items()):
                if 'duration' in effect_data:
                    effect_data['duration'] -= 1
                    if effect_data['duration'] <= 0:
                        effects_to_remove.append(effect_name)
                        log_messages.append(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_data.get('display_name', effect_name)}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–ª—è {self._get_player_name(p_id, vk_handle)}.")
                        if effect_name == 'active_domain':
                            if effect_data.get('stun_target_id'): 
                                stunned_player_data = self.get_player_data(effect_data['stun_target_id'])
                                if stunned_player_data and 'stunned' in stunned_player_data['active_effects'] and \
                                   stunned_player_data['active_effects']['stunned'].get('source_domain') == effect_data['name']:
                                    del stunned_player_data['active_effects']['stunned']
                                    log_messages.append(f"{self._get_player_name(effect_data['stun_target_id'], vk_handle)} –±–æ–ª—å—à–µ –Ω–µ –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç–æ–º –†–¢ '{effect_data['name']}'.")
            
            for eff_name in effects_to_remove:
                if eff_name in p_data_for_tick['active_effects']:
                     del p_data_for_tick['active_effects'][eff_name]
        
        for msg in log_messages:
            self._add_log(msg)
        return log_messages

    def can_perform_action(self, user_id, action_key):
        if self.state != BATTLE_STATE_ACTIVE: return False, "–ë–æ–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."
        if user_id != self.current_turn: return False, "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥."

        player = self.get_player_data(user_id)
        if 'stunned' in player['active_effects']: return False, "–í—ã –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!"

        action_key = action_key.lower()
        if action_key in BATTLE_ACTIONS:
            action_data = BATTLE_ACTIONS[action_key]
            cost = action_data.get('energy_cost', 0)
            if action_key == '—Ä—Ç': 
                tech_details = CURSED_TECHNIQUES[player['technique_id']]
                if not tech_details.get('domain_expansion'): return False, "–£ –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ—Ç –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏."
                cost = tech_details['domain_expansion']['ce_cost']
                if 'active_domain' in player['active_effects'] or 'active_domain' in self.get_player_data(self.get_opponent_id(user_id))['active_effects']:
                    return False, "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –≤ —ç—Ç–æ–º –±–æ—é."

            if player['ce'] < cost: return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü–≠ (–Ω—É–∂–Ω–æ {cost}, —É –≤–∞—Å {player['ce']})."
            return True, "–î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ."

        tech_id = player['technique_id']
        technique_moves = CURSED_TECHNIQUES[tech_id]['moves']
        if action_key in technique_moves:
            move_data = technique_moves[action_key]
            cost = move_data.get('ce_cost', 0)
            if player['ce'] < cost: return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ü–≠ –¥–ª—è '{move_data['name']}' (–Ω—É–∂–Ω–æ {cost}, —É –≤–∞—Å {player['ce']})."
            return True, "–ü—Ä–∏—ë–º –¥–æ—Å—Ç—É–ø–µ–Ω."

        return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–∏—ë–º: {action_key}"

    def perform_action(self, user_id, action_key_original, vk_handle):
        action_key = action_key_original.lower()
        can_act, message = self.can_perform_action(user_id, action_key)
        if not can_act:
            return message

        player = self.get_player_data(user_id)
        opponent_id = self.get_opponent_id(user_id)
        opponent = self.get_player_data(opponent_id)
        
        action_log = []
        player_name_str = self._get_player_name(user_id, vk_handle)
        opponent_name_str = self._get_player_name(opponent_id, vk_handle)

        base_crit_chance = 0.05
        crit_multiplier = 1.5
        
        damage_boost_percent = player['active_effects'].get('–ó–æ–Ω–∞', {}).get('damage_boost_percent', 0)
        
        user_domain_active = player['active_effects'].get('active_domain')
        domain_damage_boost = 1.0
        if user_domain_active and user_domain_active.get('user_id') == user_id:
            player_tech_details_for_rt = CURSED_TECHNIQUES[player['technique_id']]
            player_domain_stats = player_tech_details_for_rt.get('domain_expansion')
            if player_domain_stats and player_domain_stats.get('user_damage_boost'):
                domain_damage_boost = player_domain_stats['user_damage_boost']

        opponent_evasion_boost = opponent['active_effects'].get('evasion_buff', {}).get('evasion_boost', 0)
        opponent_evasion_boost += opponent['active_effects'].get('projection_speed', {}).get('evasion_boost',0)
        
        opponent_accuracy_debuff = opponent['active_effects'].get('accuracy_debuff',{}).get('value',0)
        
        opponent_defense_reduction_value = 0
        opponent_defense_reduction_percent = 0
        
        if 'blood_shield' in opponent['active_effects']:
            opponent_defense_reduction_value += opponent['active_effects']['blood_shield']['reduction']
            del opponent['active_effects']['blood_shield'] 
            action_log.append(f"–ö—Ä–æ–≤–∞–≤—ã–π —â–∏—Ç {opponent_name_str} –ø–æ–≥–ª–æ—â–∞–µ—Ç —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞!")
        if 'body_transform_defense' in opponent['active_effects']:
             opponent_defense_reduction_value += opponent['active_effects']['body_transform_defense']['reduction_value']
             del opponent['active_effects']['body_transform_defense']
             action_log.append(f"–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ–ª–∞ {opponent_name_str} –ø–æ–≥–ª–æ—â–∞–µ—Ç —á–∞—Å—Ç—å —É—Ä–æ–Ω–∞!")
        if 'defense_stance' in opponent['active_effects']:
            opponent_defense_reduction_percent += opponent['active_effects']['defense_stance']['reduction_percent']
            action_log.append(f"{opponent_name_str} –≤ –∑–∞—â–∏—Ç–Ω–æ–π —Å—Ç–æ–π–∫–µ!")


        if action_key in BATTLE_ACTIONS:
            action_data = BATTLE_ACTIONS[action_key]
            
            actual_cost = action_data.get('energy_cost', 0)
            if action_key == '—Ä—Ç':
                 tech_details_for_rt_cost = CURSED_TECHNIQUES[player['technique_id']]
                 actual_cost = tech_details_for_rt_cost['domain_expansion']['ce_cost']
            player['ce'] = max(0, player['ce'] - actual_cost)


            if action_data['type'] == 'attack' or action_data['type'] == 'special_attack':
                damage = 0
                is_crit = random.random() < (base_crit_chance + player['active_effects'].get('projection_speed',{}).get('crit_chance_boost',0))
                
                if action_key == '—á–≤':
                    if random.random() < (action_data['success_chance'] - opponent_accuracy_debuff):
                        damage = random.randint(action_data['damage_min'], action_data['damage_max'])
                        action_log.append(f"‚ö° {player_name_str} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ß—ë—Ä–Ω—É—é –í—Å–ø—ã—à–∫—É!")
                        buff = action_data['on_success_buff']
                        player['active_effects']['–ó–æ–Ω–∞'] = {'duration': buff['duration'] + 1, 'damage_boost_percent': buff['damage_boost_percent'], 'display_name': '–ó–æ–Ω–∞ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏'}
                        action_log.append(f"{player_name_str} –≤–æ—à—ë–ª –≤ '–ó–æ–Ω—É'! –£—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {buff['damage_boost_percent']}% –Ω–∞ {buff['duration']} —Ö–æ–¥–∞.")
                    else:
                        action_log.append(f"‚ö° {player_name_str} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ß—ë—Ä–Ω—É—é –í—Å–ø—ã—à–∫—É, –Ω–æ –ø–æ—Ç–µ—Ä–ø–µ–ª –Ω–µ—É–¥–∞—á—É!")
                else: 
                    if random.random() < (1.0 - opponent_evasion_boost - opponent['active_effects'].get('evasion_debuff_applied',{}).get('value_reduction',0)):
                        damage = random.randint(action_data['damage_min'], action_data['damage_max'])
                        action_log.append(f"{player_name_str} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{action_data['name']}'.")
                    else:
                        action_log.append(f"{player_name_str} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{action_data['name']}', –Ω–æ {opponent_name_str} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!")
                        damage = 0


                if damage > 0:
                    final_damage = damage
                    final_damage *= (1 + damage_boost_percent / 100.0)
                    final_damage *= domain_damage_boost
                    if 'body_transform_attack' in player['active_effects']:
                        final_damage += player['active_effects']['body_transform_attack']['damage_bonus']
                        del player['active_effects']['body_transform_attack']
                    if is_crit: final_damage *= crit_multiplier
                    
                    final_damage_after_percent_reduction = final_damage * (1 - opponent_defense_reduction_percent)
                    final_damage_after_all_reduction = max(0, round(final_damage_after_percent_reduction) - round(opponent_defense_reduction_value))
                    
                    opponent['hp'] = max(0, opponent['hp'] - final_damage_after_all_reduction)
                    action_log.append(f"–ù–∞–Ω–µ—Å–µ–Ω–æ {final_damage_after_all_reduction} —É—Ä–æ–Ω–∞ {opponent_name_str}." + (" (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!)" if is_crit and final_damage_after_all_reduction > 0 else ""))

            elif action_data['type'] == 'defense_buff':
                player['active_effects']['defense_stance'] = {
                    'duration': action_data['duration'] + 1, 
                    'reduction_percent': action_data['damage_reduction_percent'],
                    'display_name': '–ó–∞—â–∏—Ç–Ω–∞—è –°—Ç–æ–π–∫–∞'
                }
                regen = random.randint(action_data['energy_regen_min'], action_data['energy_regen_max'])
                player['ce'] = min(player['max_ce'], player['ce'] + regen)
                action_log.append(f"üõ°Ô∏è {player_name_str} –≤—Å—Ç–∞—ë—Ç –≤ –∑–∞—â–∏—Ç–Ω—É—é —Å—Ç–æ–π–∫—É! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–Ω –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω –Ω–∞ {action_data['damage_reduction_percent']*100}%. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {regen} –ü–≠.")


            elif action_data['type'] == 'heal':
                if random.random() < (action_data['success_chance'] - opponent_accuracy_debuff):
                    heal_amount = random.randint(action_data['heal_min'], action_data['heal_max'])
                    player['hp'] = min(player['max_hp'], player['hp'] + heal_amount)
                    action_log.append(f"‚ú® {player_name_str} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –û–ü–¢ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_amount} HP.")
                else:
                    action_log.append(f"‚ú® {player_name_str} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –û–ü–¢, –Ω–æ –Ω–µ —Å–º–æ–≥ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            
            elif action_data['type'] == 'domain_expansion':
                tech_details = CURSED_TECHNIQUES[player['technique_id']]
                domain_data = tech_details['domain_expansion']

                if 'active_domain' in opponent['active_effects']:
                    action_log.append(f"üåå {player_name_str} –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–∫—Ä—ã—Ç—å '{domain_data['name']}' –ø—Ä–æ—Ç–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ {opponent_name_str}!")
                    opponent_rt_data = CURSED_TECHNIQUES[opponent['technique_id']]['domain_expansion']
                    player_wins_clash = False
                    if domain_data['ce_cost'] > opponent_rt_data['ce_cost']: player_wins_clash = True
                    elif domain_data['ce_cost'] == opponent_rt_data['ce_cost']: player_wins_clash = random.random() < 0.5
                    
                    if player_wins_clash:
                        action_log.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è {player_name_str} '{domain_data['name']}' –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –∏ —Ä–∞–∑—Ä—É—à–∞–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞!")
                        if 'active_domain' in opponent['active_effects']: 
                            if opponent['active_effects']['active_domain'].get('stun_target_id') == player['id']: 
                                if 'stunned' in player['active_effects'] and player['active_effects']['stunned'].get('source_domain') == opponent['active_effects']['active_domain']['name']:
                                    del player['active_effects']['stunned']
                                    action_log.append(f"{player_name_str} –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –æ—Ç –ø–∞—Ä–∞–ª–∏—á–∞ –†–¢ '{opponent['active_effects']['active_domain']['name']}'.")
                            del opponent['active_effects']['active_domain']
                        
                        player['active_effects']['active_domain'] = {
                            'name': domain_data['name'], 'duration': domain_data['duration'] + 1, 
                            'user_id': user_id, 'display_name': f"–†–¢: {domain_data['name']}"}
                        action_log.append(f"–≠—Ñ—Ñ–µ–∫—Ç '{domain_data['name']}': {domain_data['effect_description']}")
                        if domain_data['type'] == 'insta_damage':
                            rt_damage = random.randint(domain_data['damage_min'], domain_data['damage_max'])
                            opponent['hp'] = max(0, opponent['hp'] - rt_damage)
                            action_log.append(f"'{domain_data['name']}' –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç {rt_damage} —É—Ä–æ–Ω–∞ {opponent_name_str}.")
                        elif domain_data['type'] == 'stun':
                            if random.random() < domain_data.get('stun_chance', 1.0):
                                opponent['active_effects']['stunned'] = {'duration': domain_data['duration'] +1, 'display_name': '–ü–∞—Ä–∞–ª–∏—á –æ—Ç –†–¢', 'source_domain': domain_data['name']}
                                player['active_effects']['active_domain']['stun_target_id'] = opponent_id
                                action_log.append(f"{opponent_name_str} –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ {domain_data['duration']} —Ö–æ–¥–∞!")
                    else:
                        action_log.append(f"–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–∏–ª—å–Ω–µ–µ! '{domain_data['name']}' –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è.")
                
                elif random.random() < (action_data.get('success_chance', 0.75) - opponent_accuracy_debuff): 
                    action_log.append(f"üåå {player_name_str} –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: '{domain_data['name']}'!")
                    action_log.append(f"–≠—Ñ—Ñ–µ–∫—Ç: {domain_data['effect_description']}")
                    
                    player['active_effects']['active_domain'] = {
                        'name': domain_data['name'], 'duration': domain_data['duration'] + 1, 
                        'user_id': user_id, 'display_name': f"–†–¢: {domain_data['name']}"}
                    if domain_data['type'] == 'insta_damage':
                        rt_damage = random.randint(domain_data['damage_min'], domain_data['damage_max'])
                        opponent['hp'] = max(0, opponent['hp'] - rt_damage)
                        action_log.append(f"'{domain_data['name']}' –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–Ω–æ—Å–∏—Ç {rt_damage} —É—Ä–æ–Ω–∞ {opponent_name_str}.")
                    elif domain_data['type'] == 'stun':
                        if random.random() < domain_data.get('stun_chance', 1.0):
                            opponent['active_effects']['stunned'] = {'duration': domain_data['duration'] +1, 'display_name': '–ü–∞—Ä–∞–ª–∏—á –æ—Ç –†–¢', 'source_domain': domain_data['name']}
                            player['active_effects']['active_domain']['stun_target_id'] = opponent_id
                            action_log.append(f"{opponent_name_str} –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ {domain_data['duration']} —Ö–æ–¥–∞!")
                        else:
                            action_log.append(f"{opponent_name_str} —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–∏–∑—É—é—â–µ–º—É —ç—Ñ—Ñ–µ–∫—Ç—É –†–¢!")
                else:
                    action_log.append(f"üåå {player_name_str} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –†–¢, –Ω–æ –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é!")
            
            elif action_data['type'] == 'utility': 
                ce_regen = random.randint(action_data['energy_regen_min'], action_data['energy_regen_max'])
                player['ce'] = min(player['max_ce'], player['ce'] + ce_regen)
                action_log.append(f"üßò {player_name_str} –æ—Ç–¥—ã—Ö–∞–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {ce_regen} –ü–≠.")

        elif action_key in CURSED_TECHNIQUES[player['technique_id']]['moves']:
            move_data = CURSED_TECHNIQUES[player['technique_id']]['moves'][action_key]
            player['ce'] = max(0, player['ce'] - move_data['ce_cost'])
            
            action_log.append(f"{player_name_str} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{move_data['name']}'.")

            if move_data['type'].startswith('attack'):
                damage = 0
                if random.random() < (1.0 - opponent_evasion_boost - opponent['active_effects'].get('evasion_debuff_applied',{}).get('value_reduction',0)):
                    damage = random.randint(move_data['damage_min'], move_data['damage_max'])
                else:
                    action_log.append(f"–ù–æ {opponent_name_str} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!")
                    damage = 0
                
                is_crit = random.random() < (base_crit_chance + player['active_effects'].get('projection_speed',{}).get('crit_chance_boost',0))

                if move_data['type'] == 'attack_aoe_hpcost' and 'hp_cost' in move_data:
                    player['hp'] = max(0, player['hp'] - move_data['hp_cost'])
                    action_log.append(f"–ü—Ä–∏—ë–º —Ç—Ä–µ–±—É–µ—Ç {move_data['hp_cost']} HP –æ—Ç {player_name_str}.")
                
                if damage > 0:
                    final_damage = damage 
                    final_damage *= (1 + damage_boost_percent / 100.0)
                    final_damage *= domain_damage_boost
                    if 'body_transform_attack' in player['active_effects']:
                        final_damage += player['active_effects']['body_transform_attack']['damage_bonus']
                        del player['active_effects']['body_transform_attack']
                    if is_crit: final_damage *= crit_multiplier

                    final_damage_after_percent_reduction = final_damage * (1 - opponent_defense_reduction_percent)
                    final_damage_after_all_reduction = max(0, round(final_damage_after_percent_reduction) - round(opponent_defense_reduction_value))

                    opponent['hp'] = max(0, opponent['hp'] - final_damage_after_all_reduction)
                    action_log.append(f"–ù–∞–Ω–µ—Å–µ–Ω–æ {final_damage_after_all_reduction} —É—Ä–æ–Ω–∞ {opponent_name_str}." + (" (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä!)" if is_crit and final_damage_after_all_reduction > 0 else ""))

                if move_data['type'] == 'attack_debuff' and damage > 0: 
                    if 'slow_chance' in move_data and random.random() < (move_data['slow_chance'] - opponent_accuracy_debuff):
                        opponent['active_effects']['slowed'] = {'duration': move_data['slow_duration'] + 1, 'display_name': '–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ'}
                        action_log.append(f"{opponent_name_str} –∑–∞–º–µ–¥–ª–µ–Ω –Ω–∞ {move_data['slow_duration']} —Ö–æ–¥–∞!")
                    if 'evasion_debuff' in move_data : 
                        opponent['active_effects']['evasion_debuff_applied'] = {'duration': move_data['duration'] + 1, 'value_reduction': move_data['evasion_debuff'], 'display_name': '–°–Ω–∏–∂–µ–Ω–∏–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è'}
                        action_log.append(f"–£–∫–ª–æ–Ω–µ–Ω–∏–µ {opponent_name_str} —Å–Ω–∏–∂–µ–Ω–æ –Ω–∞ {move_data['evasion_debuff']*100}% –Ω–∞ {move_data['duration']} —Ö–æ–¥–∞.")
                    if 'freeze_chance' in move_data and random.random() < (move_data['freeze_chance'] - opponent_accuracy_debuff):
                        opponent['active_effects']['stunned'] = {'duration': move_data['freeze_duration'] + 1, 'display_name': '–ó–∞–º–æ—Ä–æ–∑–∫–∞'}
                        action_log.append(f"{opponent_name_str} '–∑–∞–º–æ—Ä–æ–∂–µ–Ω' –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç {move_data['freeze_duration']} —Ö–æ–¥!")
            
            elif move_data['type'] == 'multi_attack':
                num_hits = random.randint(move_data['num_hits_min'], move_data['num_hits_max'])
                total_damage_dealt = 0
                action_log.append(f"–ü—Ä–∏—ë–º '{move_data['name']}' –Ω–∞–Ω–æ—Å–∏—Ç {num_hits} —É–¥–∞—Ä(–∞/–æ–≤):")
                for i in range(num_hits):
                    hit_damage_val = 0
                    if random.random() < (1.0 - opponent_evasion_boost - opponent['active_effects'].get('evasion_debuff_applied',{}).get('value_reduction',0)):
                        hit_damage_val = random.randint(move_data['damage_per_hit_min'], move_data['damage_per_hit_max'])
                    else:
                         action_log.append(f" - –£–¥–∞—Ä {i+1}: {opponent_name_str} —É–∫–ª–æ–Ω—è–µ—Ç—Å—è!")
                         continue 

                    is_crit_multi = random.random() < (base_crit_chance + player['active_effects'].get('projection_speed',{}).get('crit_chance_boost',0))
                    
                    final_hit_damage = hit_damage_val
                    final_hit_damage *= (1 + damage_boost_percent / 100.0)
                    final_hit_damage *= domain_damage_boost
                    if 'body_transform_attack' in player['active_effects']: 
                        final_hit_damage += player['active_effects']['body_transform_attack']['damage_bonus']
                    if is_crit_multi: final_hit_damage *= crit_multiplier
                    
                    hit_damage_after_percent_reduction = final_hit_damage * (1 - opponent_defense_reduction_percent)
                    actual_hit_damage = max(0, round(hit_damage_after_percent_reduction) - round(opponent_defense_reduction_value / num_hits)) 
                    
                    total_damage_dealt += actual_hit_damage
                    action_log.append(f" - –£–¥–∞—Ä {i+1}: {actual_hit_damage} —É—Ä–æ–Ω–∞" + (" (–∫—Ä–∏—Ç!)" if is_crit_multi and actual_hit_damage >0 else ""))
                
                if 'body_transform_attack' in player['active_effects']: del player['active_effects']['body_transform_attack'] 
                
                opponent['hp'] = max(0, opponent['hp'] - total_damage_dealt)
                if total_damage_dealt > 0: action_log.append(f"–í—Å–µ–≥–æ –Ω–∞–Ω–µ—Å–µ–Ω–æ {total_damage_dealt} —É—Ä–æ–Ω–∞ {opponent_name_str}.")


            elif move_data['type'] == 'buff_defense': 
                player['active_effects']['evasion_buff'] = {'duration': move_data['duration'] + 1, 'evasion_boost': move_data['evasion_boost'], 'display_name': f"{move_data['name']}"}
                action_log.append(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ '{move_data['name']}'. –®–∞–Ω—Å —É–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω –Ω–∞ {move_data['evasion_boost']*100}% –Ω–∞ {move_data['duration']} —Ö–æ–¥.")

            elif move_data['type'] == 'debuff': 
                 if 'success_chance_debuff' in move_data:
                    opponent['active_effects']['accuracy_debuff'] = {'duration': move_data['duration'] + 1, 'value': move_data['success_chance_debuff'], 'display_name': '–°–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏'}
                    action_log.append(f"–¢–æ—á–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π {opponent_name_str} —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ {move_data['success_chance_debuff']*100}% –Ω–∞ {move_data['duration']} —Ö–æ–¥–∞.")

            elif move_data['type'] == 'buff_self_choice': 
                player['active_effects']['body_transform_attack'] = {'duration': move_data['duration'] + 1, 'damage_bonus': move_data['attack_boost_value'], 'display_name': '–¢—Ä–∞–Ω—Å—Ñ. –¢–µ–ª–∞ (–ê—Ç–∞–∫–∞)'}
                action_log.append(f"–°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ {player_name_str} –±—É–¥–µ—Ç —É—Å–∏–ª–µ–Ω–∞ –Ω–∞ {move_data['attack_boost_value']} –µ–¥. —É—Ä–æ–Ω–∞.")


            elif move_data['type'] == 'buff_self': 
                if 'evasion_boost' in move_data and 'crit_chance_boost' in move_data:
                    player['active_effects']['projection_speed'] = {
                        'duration': move_data['duration'] + 1, 'evasion_boost': move_data['evasion_boost'], 
                        'crit_chance_boost': move_data['crit_chance_boost'], 'display_name': '–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ü—Ä–æ–µ–∫—Ü–∏–∏'
                    }
                    action_log.append(f"–£–∫–ª–æ–Ω–µ–Ω–∏–µ {player_name_str} —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {move_data['evasion_boost']*100}%, —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ –Ω–∞ {move_data['crit_chance_boost']*100}% –Ω–∞ {move_data['duration']} —Ö–æ–¥–∞.")
            
            elif move_data['type'] == 'defense': 
                reduction = random.randint(move_data['damage_reduction_min'], move_data['damage_reduction_max'])
                player['active_effects']['blood_shield'] = {'duration': move_data['duration'] + 1, 'reduction': reduction, 'display_name': '–ö—Ä–æ–≤–∞–≤—ã–π –©–∏—Ç'}
                action_log.append(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω '{move_data['name']}'. –°–ª–µ–¥—É—é—â–∞—è –∞—Ç–∞–∫–∞ –ø–æ {player_name_str} –±—É–¥–µ—Ç –æ—Å–ª–∞–±–ª–µ–Ω–∞ –Ω–∞ {reduction} —É—Ä–æ–Ω–∞.")
        
        if 'defense_stance' in opponent['active_effects']:
            del opponent['active_effects']['defense_stance']

        tick_log = self._apply_and_tick_effects(user_id, vk_handle) 
        action_log.extend(tick_log)

        next_turn_player_id = opponent_id
        if 'stunned' in opponent['active_effects'] and opponent['active_effects']['stunned']['duration'] > 0 : 
             action_log.append(f"{opponent_name_str} –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥!")
             next_turn_player_id = user_id 
        self.current_turn = next_turn_player_id

        for msg_val in action_log: 
            self._add_log(f"{msg_val}") 

        if player['hp'] <= 0 or opponent['hp'] <= 0:
            self.state = BATTLE_STATE_FINISHED
            final_log_message = ""
            if player['hp'] <= 0 and opponent['hp'] <= 0:
                final_log_message = f"‚öîÔ∏è –ë–æ–π –æ–∫–æ–Ω—á–µ–Ω! –ù–∏—á—å—è –º–µ–∂–¥—É {player_name_str} –∏ {opponent_name_str}!"
            elif opponent['hp'] <= 0:
                final_log_message = f"‚öîÔ∏è –ë–æ–π –æ–∫–æ–Ω—á–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {player_name_str}!"
                add_win(user_id)
                add_loss(opponent_id)
            else:
                final_log_message = f"‚öîÔ∏è –ë–æ–π –æ–∫–æ–Ω—á–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {opponent_name_str}!"
                add_win(opponent_id)
                add_loss(user_id)
            action_log.append(final_log_message)
            self._add_log(f"*** {final_log_message} ***")

        return "\n".join(action_log)

    def get_battle_status_text(self, vk_api_handle):
        c_name = self._get_player_name(self.challenger_id, vk_api_handle)
        t_name = self._get_player_name(self.target_id, vk_api_handle)
        
        challenger_data = self.get_player_data(self.challenger_id)
        target_data = self.get_player_data(self.target_id)

        status_lines = [f"–¢–µ–∫—É—â–∏–π –±–æ–π: {c_name} vs {t_name}"]
        
        c_effects_list = [f"{eff_data.get('display_name', eff_name)} ({eff_data['duration']-1}—Ö)" 
                          for eff_name, eff_data in challenger_data['active_effects'].items() if 'duration' in eff_data and eff_data['duration'] > 0 and eff_data.get('display_name')]
        c_effects = ", ".join(c_effects_list) or "–Ω–µ—Ç"
        status_lines.append(f"{c_name} ({CURSED_TECHNIQUES[challenger_data['technique_id']]['name']}): "
                            f"{challenger_data['hp']}/{challenger_data['max_hp']} HP, "
                            f"{challenger_data['ce']}/{challenger_data['max_ce']} –ü–≠. –≠—Ñ—Ñ–µ–∫—Ç—ã: {c_effects}")

        t_effects_list = [f"{eff_data.get('display_name', eff_name)} ({eff_data['duration']-1}—Ö)"
                          for eff_name, eff_data in target_data['active_effects'].items() if 'duration' in eff_data and eff_data['duration'] > 0 and eff_data.get('display_name')]
        t_effects = ", ".join(t_effects_list) or "–Ω–µ—Ç"
        status_lines.append(f"{t_name} ({CURSED_TECHNIQUES[target_data['technique_id']]['name']}): "
                            f"{target_data['hp']}/{target_data['max_hp']} HP, "
                            f"{target_data['ce']}/{target_data['max_ce']} –ü–≠. –≠—Ñ—Ñ–µ–∫—Ç—ã: {t_effects}")
        
        if self.state == BATTLE_STATE_ACTIVE:
            current_turn_name = self._get_player_name(self.current_turn, vk_api_handle)
            status_lines.append(f"\n–°–µ–π—á–∞—Å —Ö–æ–¥: {current_turn_name}")
        elif self.state == BATTLE_STATE_FINISHED:
             status_lines.append("\n–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.")
        
        return "\n".join(status_lines)

    def get_available_moves_text(self, user_id, vk_handle):
        if self.current_turn != user_id or self.state != BATTLE_STATE_ACTIVE:
            return "–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –±–æ–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."

        player_data = self.get_player_data(user_id)
        if 'stunned' in player_data['active_effects']:
            return f"{self._get_player_name(user_id, vk_handle)}, –≤—ã –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ."
            
        tech_id = player_data['technique_id']
        technique = CURSED_TECHNIQUES[tech_id]
        
        output_lines = [f"{self._get_player_name(user_id, vk_handle)}, –≤–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"]
        
        output_lines.append("\n–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for action_key, action_info in BATTLE_ACTIONS.items():
            actual_cost = action_info.get('energy_cost',0)
            if action_key == '—Ä—Ç':
                if technique.get('domain_expansion'):
                    actual_cost = technique['domain_expansion']['ce_cost']
                else: continue 
            
            cost_str = f"{actual_cost} –ü–≠"
            can_do, reason = self.can_perform_action(user_id, action_key)
            emoji_status = "‚úÖ" if can_do else "‚ùå"
            
            action_details_str = f"`={action_key}` - {action_info['name']} ({cost_str}). {action_info['description']}"
            
            if action_info['type'] == "attack" or action_info['type'] == "special_attack":
                action_details_str += f" –£—Ä–æ–Ω: {action_info['damage_min']}-{action_info['damage_max']}."
            if action_info['type'] == "heal":
                action_details_str += f" –ò—Å—Ü–µ–ª–µ–Ω–∏–µ: {action_info['heal_min']}-{action_info['heal_max']}. –®–∞–Ω—Å: {action_info['success_chance']*100:.0f}%."
            if action_info['type'] == "defense_buff":
                 action_details_str += f" –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: {action_info['damage_reduction_percent']*100:.0f}%. –í–æ—Å—Å—Ç. –ü–≠: {action_info['energy_regen_min']}-{action_info['energy_regen_max']}."
            if action_key == '—á–≤': 
                action_details_str += f" –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {action_info['success_chance']*100:.0f}%."
                buff = action_info['on_success_buff']
                action_details_str += f" –ü—Ä–∏ —É—Å–ø–µ—Ö–µ: '{buff['name']}' (+{buff['damage_boost_percent']}% —É—Ä–æ–Ω–∞ –Ω–∞ {buff['duration']} —Ö–æ–¥–∞)."
            if action_key == '—Ä—Ç':
                action_details_str += f" –®–∞–Ω—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {action_info.get('success_chance', 0.75)*100:.0f}%."
                if technique.get('domain_expansion'):
                    action_details_str += f" –≠—Ñ—Ñ–µ–∫—Ç –†–¢ ({technique['domain_expansion']['name']}): {technique['domain_expansion']['effect_description']}"
            if action_key == '–æ—Ç–¥—ã—Ö':
                action_details_str += f" –í–æ—Å—Å—Ç. –ü–≠: {action_info['energy_regen_min']}-{action_info['energy_regen_max']}."

            output_lines.append(f"  {emoji_status} {action_details_str}")


        output_lines.append(f"\n–ü—Ä–∏—ë–º—ã —Ç–µ—Ö–Ω–∏–∫–∏ '{technique['name']}':")
        if not technique['moves']:
            output_lines.append("  –£ —ç—Ç–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤.")
        else:
            for move_key, move_info in technique['moves'].items():
                cost_str = f"{move_info['ce_cost']} –ü–≠"
                can_do, reason = self.can_perform_action(user_id, move_key)
                emoji_status = "‚úÖ" if can_do else "‚ùå"

                move_details_str = f"`={move_key}` - {move_info['name']} ({cost_str}). {move_info['description']}"

                if 'damage_min' in move_info and 'damage_max' in move_info:
                    move_details_str += f" –£—Ä–æ–Ω: {move_info['damage_min']}-{move_info['damage_max']}."
                if 'hp_cost' in move_info:
                    move_details_str += f" –ó–∞—Ç—Ä–∞—Ç—ã HP: {move_info['hp_cost']}."
                if 'evasion_boost' in move_info: 
                     move_details_str += f" –î–∞—ë—Ç +{move_info['evasion_boost']*100:.0f}% —É–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞ {move_info['duration']} —Ö–æ–¥."
                if 'slow_chance' in move_info: 
                    move_details_str += f" –®–∞–Ω—Å –∑–∞–º–µ–¥–ª–µ–Ω–∏—è: {move_info['slow_chance']*100:.0f}% –Ω–∞ {move_info['slow_duration']} —Ö–æ–¥–∞."
                if 'evasion_debuff' in move_info: 
                    move_details_str += f" –°–Ω–∏–∂–∞–µ—Ç —É–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ {move_info['evasion_debuff']*100:.0f}% –Ω–∞ {move_info['duration']} —Ö–æ–¥–∞."
                if 'success_chance_debuff' in move_info: 
                    move_details_str += f" –°–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ü–µ–ª–∏ –Ω–∞ {move_info['success_chance_debuff']*100:.0f}% –Ω–∞ {move_info['duration']} —Ö–æ–¥–∞."
                if move_info['type'] == 'buff_self_choice': 
                    move_details_str += f" –£—Å–∏–ª–µ–Ω–∏–µ —Å–ª–µ–¥. –∞—Ç–∞–∫–∏ –Ω–∞ {move_info['attack_boost_value']} –ò–õ–ò —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –ø–æ —Å–µ–±–µ –Ω–∞ {move_info['damage_reduction']*100:.0f}% (1 —Ö–æ–¥)."
                if 'freeze_chance' in move_info: 
                    move_details_str += f" –®–∞–Ω—Å –∑–∞–º–æ—Ä–æ–∑–∫–∏: {move_info['freeze_chance']*100:.0f}% –Ω–∞ {move_info['freeze_duration']} —Ö–æ–¥."
                if move_info['type'] == 'buff_self' and 'crit_chance_boost' in move_info : 
                    move_details_str += f" +{move_info['evasion_boost']*100:.0f}% —É–∫–ª–æ–Ω–µ–Ω–∏—è, +{move_info['crit_chance_boost']*100:.0f}% —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ –Ω–∞ {move_info['duration']} —Ö–æ–¥–∞."
                if move_info['type'] == 'multi_attack':
                     move_details_str += f" –£–¥–∞—Ä—ã: {move_info['num_hits_min']}-{move_info['num_hits_max']} –ø–æ {move_info['damage_per_hit_min']}-{move_info['damage_per_hit_max']} —É—Ä–æ–Ω–∞."
                if move_info['type'] == 'defense' and 'damage_reduction_min' in move_info: 
                    move_details_str += f" –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –æ—Ç —Å–ª–µ–¥. –∞—Ç–∞–∫–∏: {move_info['damage_reduction_min']}-{move_info['damage_reduction_max']} (1 —Ö–æ–¥)."
                
                output_lines.append(f"  {emoji_status} {move_details_str}")
        
        return "\n".join(output_lines)

active_battles = {}

def handle_battle_command(vk, event, text_command_stripped):
    user_id = event.obj.message['from_id']
    peer_id = event.obj.message['peer_id']
    
    is_admin = user_id in ADMIN_IDS 
    
    command_parts = text_command_stripped.lower().split()
    main_command = command_parts[0] if command_parts else ""

    def get_display_name(vk_id):
        nick = get_user_nick(vk_id)
        if nick:
            return f"[id{vk_id}|{nick}]"
        char_row = get_character_by_owner_id(vk_id)
        if char_row and 'full_name' in dict(char_row):
            return f"[id{vk_id}|{dict(char_row)['full_name']}]"
        return f"[id{vk_id}|{vk_id}]"

    player_name_display = get_display_name(user_id)

    if main_command == '–±–æ–π':
        if peer_id < 2000000000:
            send_battle_message(vk, peer_id, "–ë–æ–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–µ—Å–µ–¥–∞—Ö.")
            return

        if peer_id in active_battles and active_battles[peer_id].state != BATTLE_STATE_FINISHED:
            send_battle_message(vk, peer_id, "–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –±–æ–π.")
            return

        target_id = parse_user_mention(event.obj.message['text'])
        if not target_id:
            send_battle_message(vk, peer_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: `=–ë–æ–π @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ`")
            return
        if target_id == user_id:
            send_battle_message(vk, peer_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –±–æ–π —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        target_name_display = get_display_name(target_id)

        active_battles[peer_id] = Battle(user_id, target_id, peer_id)
        active_battles[peer_id]._get_player_name(user_id, vk) 
        active_battles[peer_id]._get_player_name(target_id, vk)

        send_battle_message(vk, peer_id, 
            f"‚öîÔ∏è {player_name_display} –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–æ–π {target_name_display}!\n"
            f"{target_name_display}, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `=–ü—Ä–∏–Ω—è—Ç—å` —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ `=–û—Ç–∫–ª–æ–Ω–∏—Ç—å` –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    battle = active_battles.get(peer_id)
    if not battle:
        return 

    if main_command == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        if user_id == battle.challenger_id or user_id == battle.target_id or is_admin: 
            challenger_name_on_cancel = get_display_name(battle.challenger_id)
            target_name_on_cancel = get_display_name(battle.target_id)
            del active_battles[peer_id]
            send_battle_message(vk, peer_id, f"‚öîÔ∏è –ë–æ–π –º–µ–∂–¥—É {challenger_name_on_cancel} –∏ {target_name_on_cancel} –æ—Ç–º–µ–Ω–µ–Ω {player_name_display}.")
        else:
            send_battle_message(vk, peer_id, "–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –±–æ–π.")
        return
    
    if battle.state == BATTLE_STATE_WAITING:
        if main_command == '–ø—Ä–∏–Ω—è—Ç—å':
            if user_id == battle.target_id:
                battle.state = BATTLE_STATE_ACTIVE
                c_data = battle.get_player_data(battle.challenger_id)
                t_data = battle.get_player_data(battle.target_id)
                
                challenger_name = battle._get_player_name(battle.challenger_id, vk)
                target_name = battle._get_player_name(battle.target_id, vk)

                msg = (f"‚öîÔ∏è {target_name} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–∑–æ–≤! –ë–æ–π –Ω–∞—á–∞–ª—Å—è!\n\n"
                       f"{challenger_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É: {CURSED_TECHNIQUES[c_data['technique_id']]['name']}\n"
                       f"{target_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫—É: {CURSED_TECHNIQUES[t_data['technique_id']]['name']}\n\n"
                       f"{battle.get_battle_status_text(vk)}\n\n"
                       f"{battle.get_available_moves_text(battle.current_turn, vk)}")
                send_battle_message(vk, peer_id, msg)
            else:
                send_battle_message(vk, peer_id, f"{player_name_display}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ü–µ–ª—å—é —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞.")
            return
        elif main_command == '–æ—Ç–∫–ª–æ–Ω–∏—Ç—å':
            if user_id == battle.target_id:
                challenger_name_on_decline = get_display_name(battle.challenger_id)
                target_name_on_decline = get_display_name(battle.target_id)
                del active_battles[peer_id]
                send_battle_message(vk, peer_id, f"‚öîÔ∏è {target_name_on_decline} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –Ω–∞ –±–æ–π –æ—Ç {challenger_name_on_decline}.")
            else:
                send_battle_message(vk, peer_id, f"{player_name_display}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ü–µ–ª—å—é —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞.")
            return
        else:
            send_battle_message(vk, peer_id, f"–ë–æ–π –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è. {battle._get_player_name(battle.target_id,vk)} –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `=–ü—Ä–∏–Ω—è—Ç—å` –∏–ª–∏ `=–û—Ç–∫–ª–æ–Ω–∏—Ç—å`.")
            return

    if battle.state == BATTLE_STATE_ACTIVE:
        if user_id != battle.current_turn:
            send_battle_message(vk, peer_id, f"–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥, {player_name_display}. –•–æ–¥–∏—Ç {battle._get_player_name(battle.current_turn,vk)}.")
            return

        is_valid_battle_action = False
        can_act_check, _ = battle.can_perform_action(user_id, main_command)
        if can_act_check:
            is_valid_battle_action = True
        
        if is_valid_battle_action:
            action_result_message = battle.perform_action(user_id, main_command, vk)
            
            full_message = action_result_message + "\n\n"
            full_message += battle.get_battle_status_text(vk)

            if battle.state == BATTLE_STATE_ACTIVE :
                full_message += "\n\n" + battle.get_available_moves_text(battle.current_turn, vk)
            
            send_battle_message(vk, peer_id, full_message)

            if battle.state == BATTLE_STATE_FINISHED:
                if peer_id in active_battles: 
                    del active_battles[peer_id]
        else:
            _, reason_cant_act = battle.can_perform_action(user_id, main_command)
            available_moves = battle.get_available_moves_text(user_id, vk)
            send_battle_message(vk, peer_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å '{main_command}'. –ü—Ä–∏—á–∏–Ω–∞: {reason_cant_act}\n{available_moves}")
        return

    if battle.state == BATTLE_STATE_FINISHED:
        send_battle_message(vk, peer_id, "–≠—Ç–æ—Ç –±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π: `=–ë–æ–π @—Å–æ–ø–µ—Ä–Ω–∏–∫`")
        if peer_id in active_battles:
            del active_battles[peer_id]
        return

def send_battle_message(vk, peer_id_target, text, reply_to=None, keyboard=None):
    parts = split_message(text)
    for i, part in enumerate(parts):
        try:
            vk.messages.send(
                peer_id=peer_id_target,
                message=part,
                random_id=get_random_id(),
                reply_to=reply_to if i == 0 else None,
                keyboard=keyboard if i == len(parts) - 1 else None,
                disable_mentions=1 
            )
        except vk_api.exceptions.ApiError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ peer_id {peer_id_target}: {e}")
            if i == 0: 
                try:
                    vk.messages.send(
                        peer_id=peer_id_target,
                        message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        random_id=get_random_id(),
                        reply_to=reply_to,
                        disable_mentions=1
                    )
                except Exception as e_inner:
                     print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ peer_id {peer_id_target}: {e_inner}")
            break